From 8c224cd5a83c2be342a60b44bb18cbf18bc589b7 Mon Sep 17 00:00:00 2001
From: Daniel Shiposha <mrshiposha@gmail.com>
Date: Wed, 13 Dec 2023 20:04:31 +0100
Subject: [PATCH] feat: multiseat logs and cache

---
 src/cache/mod.rs | 14 ++++++++++----
 src/constants.rs |  8 ++------
 src/main.rs      | 19 ++++++++++++++++---
 3 files changed, 28 insertions(+), 13 deletions(-)

diff --git a/src/cache/mod.rs b/src/cache/mod.rs
index d85571f..7c5cd65 100644
--- a/src/cache/mod.rs
+++ b/src/cache/mod.rs
@@ -8,13 +8,14 @@ mod lru;
 
 use std::fs::{create_dir_all, write};
 use std::num::NonZeroUsize;
-use std::path::Path;
+use std::path::{Path, PathBuf};
 
 use serde::{Deserialize, Serialize};
 use tracing::info;
 
 use self::lru::LruCache;
-use crate::constants::CACHE_PATH;
+use crate::constants::CACHE_DIR;
+use crate::seat;
 use crate::tomlutils::{load_toml, TomlFileResult};
 
 /// Limit to the size of the user to last-used session mapping.
@@ -41,7 +42,7 @@ impl Default for Cache {
 impl Cache {
     /// Load the cache file from disk.
     pub fn new() -> Self {
-        let mut cache: Self = load_toml(CACHE_PATH);
+        let mut cache: Self = load_toml(&Self::path());
         // Make sure that the LRU can contain the needed amount of mappings.
         cache
             .user_to_last_sess
@@ -49,9 +50,14 @@ impl Cache {
         cache
     }
 
+    fn path() -> PathBuf {
+        let cache_dir = &Path::new(CACHE_DIR).join(seat());
+        cache_dir.join("cache.toml")
+    }
+
     /// Save the cache file to disk.
     pub fn save(&self) -> TomlFileResult<()> {
-        let cache_path = Path::new(CACHE_PATH);
+        let cache_path = &Self::path();
         if !cache_path.exists() {
             // Create the cache directory.
             if let Some(cache_dir) = cache_path.parent() {
diff --git a/src/constants.rs b/src/constants.rs
index 7fed1d6..e3d16e2 100644
--- a/src/constants.rs
+++ b/src/constants.rs
@@ -32,14 +32,10 @@ pub const CONFIG_PATH: &str = concatcp!(GREETD_CONFIG_DIR, "/", GREETER_NAME, ".
 pub const CSS_PATH: &str = concatcp!(GREETD_CONFIG_DIR, "/", GREETER_NAME, ".css");
 
 /// The directory for system cache files
-const CACHE_DIR: &str = env_or!("CACHE_DIR", concatcp!("/var/cache/", GREETER_NAME));
-/// Path to the cache file
-pub const CACHE_PATH: &str = concatcp!(CACHE_DIR, "/cache.toml");
+pub const CACHE_DIR: &str = env_or!("CACHE_DIR", concatcp!("/var/cache/", GREETER_NAME));
 
 /// The directory for system log files
-const LOG_DIR: &str = env_or!("LOG_DIR", concatcp!("/var/log/", GREETER_NAME));
-/// Path to the cache file
-pub const LOG_PATH: &str = concatcp!(LOG_DIR, "/log");
+pub const LOG_DIR: &str = env_or!("LOG_DIR", concatcp!("/var/log/", GREETER_NAME));
 
 /// Default command for rebooting
 pub const REBOOT_CMD: &str = env_or!("REBOOT_CMD", "reboot");
diff --git a/src/main.rs b/src/main.rs
index 3d9a417..5da63a8 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -19,7 +19,7 @@ use file_rotate::{compression::Compression, suffix::AppendCount, ContentLimit, F
 use tracing_appender::{non_blocking, non_blocking::WorkerGuard};
 use tracing_subscriber::{filter::LevelFilter, fmt::time::OffsetTime};
 
-use crate::constants::{APP_ID, CONFIG_PATH, CSS_PATH, LOG_PATH};
+use crate::constants::{APP_ID, CONFIG_PATH, CSS_PATH, LOG_DIR};
 use crate::gui::{Greeter, GreeterInit};
 
 const MAX_LOG_FILES: usize = 3;
@@ -63,9 +63,19 @@ fn main() {
     });
 }
 
+fn seat() -> String {
+    std::env::var("XDG_SEAT").expect("XDG_SEAT env var must present")
+}
+
+fn log_path() -> PathBuf {
+    let log_dir = &Path::new(LOG_DIR).join(seat());
+    log_dir.join("log")
+}
+
 /// Initialize the log file with file rotation.
 fn setup_log_file() -> IoResult<FileRotate<AppendCount>> {
-    let log_path = Path::new(LOG_PATH);
+    let log_path = &log_path();
+
     if !log_path.exists() {
         if let Some(log_dir) = log_path.parent() {
             create_dir_all(log_dir)?;
@@ -118,7 +128,10 @@ fn init_logging(log_level: &LogLevel) -> WorkerGuard {
             guard
         }
         Err(err) => {
-            println!("ERROR: Couldn't create log file '{LOG_PATH}': {err}");
+            println!(
+                "ERROR: Couldn't create log file '{}': {err}",
+                log_path().display()
+            );
             let (file, guard) = non_blocking(std::io::stdout());
             logger.with_writer(file).init();
             guard
-- 
2.47.0

