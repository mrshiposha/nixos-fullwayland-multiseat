diff --git a/src/cache/mod.rs b/src/cache/mod.rs
index 8062825..a7aff6d 100644
--- a/src/cache/mod.rs
+++ b/src/cache/mod.rs
@@ -8,12 +8,13 @@ mod lru;
 
 use std::fs::{create_dir_all, write};
 use std::num::NonZeroUsize;
-use std::path::Path;
+use std::path::{Path, PathBuf};
 
 use serde::{Deserialize, Serialize};
 
 use self::lru::LruCache;
-use crate::constants::CACHE_PATH;
+use crate::constants::CACHE_DIR;
+use crate::seat;
 use crate::tomlutils::{load_toml, TomlFileResult};
 
 /// Limit to the size of the user to last-used session mapping.
@@ -40,7 +41,7 @@ impl Default for Cache {
 impl Cache {
     /// Load the cache file from disk.
     pub fn new() -> Self {
-        let mut cache: Self = load_toml(CACHE_PATH);
+        let mut cache: Self = load_toml(&Self::path());
         // Make sure that the LRU can contain the needed amount of mappings.
         cache
             .user_to_last_sess
@@ -48,9 +49,14 @@ impl Cache {
         cache
     }
 
+    fn path() -> PathBuf {
+        let cache_dir = &Path::new(CACHE_DIR).join(seat());
+        cache_dir.join("cache.toml")
+    }
+
     /// Save the cache file to disk.
     pub fn save(&self) -> TomlFileResult<()> {
-        let cache_path = Path::new(CACHE_PATH);
+        let cache_path = &Self::path();
         if !cache_path.exists() {
             // Create the cache directory.
             if let Some(cache_dir) = cache_path.parent() {
diff --git a/src/constants.rs b/src/constants.rs
index 9bf8470..f863842 100644
--- a/src/constants.rs
+++ b/src/constants.rs
@@ -30,14 +30,10 @@ pub const CONFIG_PATH: &str = concatcp!(GREETD_CONFIG_DIR, "/", GREETER_NAME, ".
 pub const CSS_PATH: &str = concatcp!(GREETD_CONFIG_DIR, "/", GREETER_NAME, ".css");
 
 /// The directory for system cache files
-const CACHE_DIR: &str = env_or!("CACHE_DIR", concatcp!("/var/cache/", GREETER_NAME));
-/// Path to the cache file
-pub const CACHE_PATH: &str = concatcp!(CACHE_DIR, "/cache.toml");
+pub const CACHE_DIR: &str = env_or!("CACHE_DIR", concatcp!("/var/lib/", GREETER_NAME));
 
 /// The directory for system log files
-const LOG_DIR: &str = env_or!("LOG_DIR", concatcp!("/var/log/", GREETER_NAME));
-/// Path to the cache file
-pub const LOG_PATH: &str = concatcp!(LOG_DIR, "/log");
+pub const LOG_DIR: &str = env_or!("LOG_DIR", concatcp!("/var/log/", GREETER_NAME));
 
 /// Default command for rebooting
 pub const REBOOT_CMD: &str = env_or!("REBOOT_CMD", "reboot");
diff --git a/src/main.rs b/src/main.rs
index 30028a4..9a20465 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -22,7 +22,7 @@ use tracing_subscriber::{
     filter::LevelFilter, fmt::layer, fmt::time::OffsetTime, layer::SubscriberExt,
 };
 
-use crate::constants::{APP_ID, CONFIG_PATH, CSS_PATH, LOG_PATH};
+use crate::constants::{APP_ID, CONFIG_PATH, CSS_PATH, LOG_DIR};
 use crate::gui::{Greeter, GreeterInit};
 
 #[macro_use]
@@ -53,8 +53,8 @@ enum LogLevel {
 #[command(author, version, about)]
 struct Args {
     /// The path to the log file
-    #[arg(short = 'l', long, value_name = "PATH", default_value = LOG_PATH)]
-    logs: PathBuf,
+    #[arg(short = 'l', long, value_name = "PATH")]
+    logs: Option<PathBuf>,
 
     /// The verbosity level of the logs
     #[arg(short = 'L', long, value_name = "LEVEL", default_value = "info")]
@@ -79,8 +79,10 @@ struct Args {
 
 fn main() {
     let args = Args::parse();
+    let logs = args.logs.unwrap_or_else(default_log_path);
+
     // Keep the guard alive till the end of the function, since logging depends on this.
-    let _guard = init_logging(&args.logs, &args.log_level, args.verbose);
+    let _guard = init_logging(&logs, &args.log_level, args.verbose);
 
     let app = relm4::RelmApp::new(APP_ID);
     app.with_args(vec![]).run_async::<Greeter>(GreeterInit {
@@ -90,6 +92,15 @@ fn main() {
     });
 }
 
+fn seat() -> String {
+    std::env::var("XDG_SEAT").expect("XDG_SEAT env var must present")
+}
+
+fn default_log_path() -> PathBuf {
+    let log_dir = &Path::new(LOG_DIR).join(seat());
+    log_dir.join("log")
+}
+
 /// Initialize the log file with file rotation.
 fn setup_log_file(log_path: &Path) -> IoResult<FileRotate<AppendCount>> {
     if !log_path.exists() {
@@ -165,7 +176,11 @@ fn init_logging(log_path: &Path, log_level: &LogLevel, stdout: bool) -> Vec<Work
             let (file, guard) = non_blocking(std::io::stdout());
             guards.push(guard);
             builder.with_writer(file).init();
-            tracing::error!("Couldn't create log file '{LOG_PATH}': {file_err}");
+            tracing::error!(
+                "Couldn't create log file '{}': {}",
+                log_path.display(),
+                file_err
+            );
         }
     };
 
